/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 *  SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        home_row_mods: home_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <400>;
            require-prior-idle-ms = <400>;
            flavor = "hold-preferred";
        };

        num_and_symbol: num_and_symbol {
            compatible = "zmk,behavior-hold-tap";
            label = "NUM_AND_SYMBOL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <400>;
            require-prior-idle-ms = <400>;
            flavor = "tap-preferred";
        };

        // ðŸ”¹ Enhanced home row Layer-Tap with stricter timing to prevent accidental layer switches
        hr_lt: hr_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LT";
            #binding-cells = <2>;
            tapping-term-ms = <280>;         // Optimal timing for most users
            quick-tap-ms = <175>;            // Allows quick repeated taps
            require-prior-idle-ms = <150>;   // Requires pause before hold activation
            flavor = "tap-unless-interrupted"; // Most reliable for preventing accidental holds
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 10 17 18 19 20 21 22 29 30 31 32 33 34>; // Only right-hand keys can trigger left-hand holds
        };

        // ðŸ”¹ Alternative: Even more conservative layer-tap for ultra-sensitive users
        hr_lt_conservative: hr_lt_conservative {
            compatible = "zmk,behavior-hold-tap";
            label = "CONSERVATIVE_LT";
            #binding-cells = <2>;
            tapping-term-ms = <600>;         // Very long hold time
            quick-tap-ms = <200>;            // Allow quick taps
            require-prior-idle-ms = <200>;   // Require significant pause
            flavor = "tap-preferred";        // Strongly prefer tap over hold
            bindings = <&mo>, <&kp>;
        };

        // ðŸ”¹ Alternative: Mod-tap version that only activates on key combinations
        hr_mt: hr_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MT";
            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";
            bindings = <
&kp TAB         &kp Q        &kp W          &kp E         &kp R        &kp T                              &kp Y         &kp U         &kp I         &kp O         &kp P            &kp BACKSLASH
&kp GRAVE       &hr_lt 1 A   &hr_lt 2 S     &hr_lt 3 D    &hr_lt 4 F   &kp G                              &kp H         &hr_lt 4 J    &hr_lt 3 K    &hr_lt 2 L    &hr_lt 1 SEMICOLON &kp ENTER
&kp LEFT_SHIFT  &kp Z        &kp X          &kp C         &kp V        &kp B                              &kp N         &kp M         &kp COMMA     &kp PERIOD    &kp SLASH        &kp RIGHT_SHIFT
&none           &none        &kp ESC        &mo 2         &mo 0        &kp SPACE   &none       &none       &mo 0         &mo 2         &kp BACKSPACE &kp SINGLE_QUOTE &none           &none
                                    &none   &kp LGUI      &kp LCTRL    &kp LEFT_ALT &kp RIGHT_ALT &kp RIGHT_CONTROL &kp RIGHT_META &none
            >;

            sensor-bindings = <&inc_dec_kp A C_VOL_DN>;
        };

        // Alternative layout using conservative layer-tap behavior
        // Uncomment and use this instead if you want maximum prevention of accidental switches
        /*
        default_layer_conservative {
            display-name = "Base (Conservative)";
            bindings = <
&kp TAB         &kp Q        &kp W          &kp E         &kp R        &kp T                              &kp Y         &kp U         &kp I         &kp O         &kp P            &kp BACKSLASH
&kp GRAVE       &hr_lt_conservative 1 A   &hr_lt_conservative 2 S     &hr_lt_conservative 3 D    &hr_lt_conservative 4 F   &kp G                              &kp H         &hr_lt_conservative 4 J    &hr_lt_conservative 3 K    &hr_lt_conservative 2 L    &hr_lt_conservative 1 SEMICOLON &kp ENTER
&kp LEFT_SHIFT  &kp Z        &kp X          &kp C         &kp V        &kp B                              &kp N         &kp M         &kp COMMA     &kp PERIOD    &kp SLASH        &kp RIGHT_SHIFT
&none           &none        &kp ESC        &mo 2         &mo 0        &kp SPACE   &none       &none       &mo 0         &mo 2         &kp BACKSPACE &kp SINGLE_QUOTE &none           &none
                                    &none   &kp LGUI      &kp LCTRL    &kp LEFT_ALT &kp RIGHT_ALT &kp RIGHT_CONTROL &kp RIGHT_META &none
            >;

            sensor-bindings = <&inc_dec_kp A C_VOL_DN>;
        };
        */

        L1_numsAndSymb {
            display-name = "Lower";
            bindings = <
&kp HOME  &kp PAGE_UP    &kp N7        &kp N8        &kp N9          &kp DEL                          &kp DEL        &kp AMPERSAND    &kp ASTERISK  &trans     &kp LEFT_BRACKET      &kp RIGHT_BRACKET
&kp END   &kp PAGE_DOWN  &kp NUMBER_4  &kp N5        &kp NUMBER_6    &kp BACKSPACE                    &kp BACKSPACE  &kp DOLLAR       &kp PERCENT   &kp CARET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&trans    &kp N0         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3    &trans                           &trans         &kp EXCLAMATION  &kp AT_SIGN   &kp HASH   &kp LEFT_BRACE        &kp RIGHT_BRACE
&none     &none          &kp UP_ARROW  &kp RIGHT     &kp LEFT_ARROW  &kp DOWN       &trans    &trans  &trans         &trans           &none         &none      &none                 &none
                                       &trans        &kp ENTER       &trans         &trans    &trans  &trans         &trans           &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        L2_function_stuff {
            bindings = <
&trans    &trans  &kp F7  &kp F8  &kp F9  &kp F10                    &trans  &kp LC(LEFT)  &kp UP    &kp LC(RIGHT)  &trans  &trans
&trans    &trans  &kp F4  &kp F5  &kp F6  &kp F11                    &trans  &kp LEFT      &kp DOWN  &kp RIGHT      &trans  &trans
&kp CAPS  &trans  &kp F1  &kp F2  &kp F3  &to 0                      &trans  &kp LA(LEFT)  &trans    &kp LA(RIGHT)  &trans  &trans
&trans    &trans  &trans  &trans  &trans  &trans   &trans    &trans  &trans  &trans        &trans    &trans         &trans  &trans
                          &trans  &trans  &trans   &trans    &trans  &trans  &trans        &trans
            >;
        };

        L3mousestuff {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &msc SCRL_LEFT   &mkp LCLK         &mmv MOVE_UP      &mkp RCLK        &mkp MCLK  &msc SCRL_UP
&trans  &trans  &trans  &trans  &trans  &trans                    &msc SCRL_RIGHT  &mmv MOVE_LEFT    &mmv MOVE_DOWN    &mmv MOVE_RIGHT  &trans     &msc SCRL_DOWN
&trans  &trans  &trans  &trans  &trans  &trans                    &trans           &mmv MOVE_X(100)  &mmv MOVE_Y(100)  &trans           &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans           &trans            &trans            &trans           &trans     &trans
                        &trans  &trans  &trans  &trans    &trans  &trans           &trans            &trans
            >;
        };

        homerowstuffs {
            bindings = <
&kp ESCAPE  &trans  &trans  &trans  &trans  &trans                             &trans  &kp LC(LEFT)  &kp UP        &kp LC(RIGHT)  &trans  &trans
&trans      &trans  &trans  &trans  &trans  &trans                             &trans  &kp LEFT      &kp DOWN      &kp RIGHT      &trans  &trans
&trans      &trans  &trans  &trans  &trans  &trans                             &trans  &kp LA(LEFT)  &kp LA(DOWN)  &kp LA(RIGHT)  &trans  &trans
&trans      &trans  &trans  &trans  &trans  &trans  &trans          &trans     &trans  &trans        &trans        &trans         &trans  &trans
                            &trans  &trans  &trans  &kp LEFT_WIN    &kp SPACE  &trans  &trans        &trans
            >;
        };
    };
};
